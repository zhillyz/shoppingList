{"ast":null,"code":"var indexMap = function (list) {\n  var map = {};\n  list.forEach(function (each, i) {\n    map[each] = map[each] || [];\n    map[each].push(i);\n  });\n  return map;\n};\nvar longestCommonSubstring = function (seq1, seq2) {\n  var result = {\n    startString1: 0,\n    startString2: 0,\n    length: 0\n  };\n  var indexMapBefore = indexMap(seq1);\n  var previousOverlap = [];\n  seq2.forEach(function (eachAfter, indexAfter) {\n    var overlapLength;\n    var overlap = [];\n    var indexesBefore = indexMapBefore[eachAfter] || [];\n    indexesBefore.forEach(function (indexBefore) {\n      overlapLength = (indexBefore && previousOverlap[indexBefore - 1] || 0) + 1;\n      if (overlapLength > result.length) {\n        result.length = overlapLength;\n        result.startString1 = indexBefore - overlapLength + 1;\n        result.startString2 = indexAfter - overlapLength + 1;\n      }\n      overlap[indexBefore] = overlapLength;\n    });\n    previousOverlap = overlap;\n  });\n  return result;\n};\nmodule.exports = longestCommonSubstring;","map":{"version":3,"names":["indexMap","list","map","forEach","each","i","push","longestCommonSubstring","seq1","seq2","result","startString1","startString2","length","indexMapBefore","previousOverlap","eachAfter","indexAfter","overlapLength","overlap","indexesBefore","indexBefore","module","exports"],"sources":["/home/zhillyz/shoppingList/node_modules/longest-common-substring/index.js"],"sourcesContent":["\nvar indexMap = function(list) {\n  var map = {}\n  list.forEach(function(each, i) {\n    map[each] = map[each] || []\n    map[each].push(i)\n  })\n  return map\n}\n\nvar longestCommonSubstring = function(seq1, seq2) {\n  var result = {startString1:0, startString2:0, length:0}\n  var indexMapBefore = indexMap(seq1)\n  var previousOverlap = []\n  seq2.forEach(function(eachAfter, indexAfter) {\n    var overlapLength\n    var overlap = []\n    var indexesBefore = indexMapBefore[eachAfter] || []\n    indexesBefore.forEach(function(indexBefore) {\n      overlapLength = ((indexBefore && previousOverlap[indexBefore-1]) || 0) + 1;\n      if (overlapLength > result.length) {\n        result.length = overlapLength;\n        result.startString1 = indexBefore - overlapLength + 1;\n        result.startString2 = indexAfter - overlapLength + 1;\n      }\n      overlap[indexBefore] = overlapLength\n    })\n    previousOverlap = overlap\n  })\n  return result\n}\n\nmodule.exports = longestCommonSubstring\n"],"mappings":"AACA,IAAIA,QAAQ,GAAG,SAAAA,CAASC,IAAI,EAAE;EAC5B,IAAIC,GAAG,GAAG,CAAC,CAAC;EACZD,IAAI,CAACE,OAAO,CAAC,UAASC,IAAI,EAAEC,CAAC,EAAE;IAC7BH,GAAG,CAACE,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC,IAAI,EAAE;IAC3BF,GAAG,CAACE,IAAI,CAAC,CAACE,IAAI,CAACD,CAAC,CAAC;EACnB,CAAC,CAAC;EACF,OAAOH,GAAG;AACZ,CAAC;AAED,IAAIK,sBAAsB,GAAG,SAAAA,CAASC,IAAI,EAAEC,IAAI,EAAE;EAChD,IAAIC,MAAM,GAAG;IAACC,YAAY,EAAC,CAAC;IAAEC,YAAY,EAAC,CAAC;IAAEC,MAAM,EAAC;EAAC,CAAC;EACvD,IAAIC,cAAc,GAAGd,QAAQ,CAACQ,IAAI,CAAC;EACnC,IAAIO,eAAe,GAAG,EAAE;EACxBN,IAAI,CAACN,OAAO,CAAC,UAASa,SAAS,EAAEC,UAAU,EAAE;IAC3C,IAAIC,aAAa;IACjB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,aAAa,GAAGN,cAAc,CAACE,SAAS,CAAC,IAAI,EAAE;IACnDI,aAAa,CAACjB,OAAO,CAAC,UAASkB,WAAW,EAAE;MAC1CH,aAAa,GAAG,CAAEG,WAAW,IAAIN,eAAe,CAACM,WAAW,GAAC,CAAC,CAAC,IAAK,CAAC,IAAI,CAAC;MAC1E,IAAIH,aAAa,GAAGR,MAAM,CAACG,MAAM,EAAE;QACjCH,MAAM,CAACG,MAAM,GAAGK,aAAa;QAC7BR,MAAM,CAACC,YAAY,GAAGU,WAAW,GAAGH,aAAa,GAAG,CAAC;QACrDR,MAAM,CAACE,YAAY,GAAGK,UAAU,GAAGC,aAAa,GAAG,CAAC;MACtD;MACAC,OAAO,CAACE,WAAW,CAAC,GAAGH,aAAa;IACtC,CAAC,CAAC;IACFH,eAAe,GAAGI,OAAO;EAC3B,CAAC,CAAC;EACF,OAAOT,MAAM;AACf,CAAC;AAEDY,MAAM,CAACC,OAAO,GAAGhB,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}