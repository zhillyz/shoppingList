{"ast":null,"code":"var _jsxFileName = \"/home/zhillyz/shoppingList/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RecipeApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateLocalStorage = () => {\n      const {\n        recipes,\n        shoppingList,\n        ownedIngredients,\n        usedIngredients\n      } = this.state;\n      localStorage.setItem('recipes', JSON.stringify(recipes));\n      localStorage.setItem('shoppingList', JSON.stringify(shoppingList));\n      localStorage.setItem('ownedIngredients', JSON.stringify(ownedIngredients));\n      localStorage.setItem('usedIngredients', JSON.stringify(usedIngredients));\n    };\n    this.handleRecipeChange = event => {\n      this.setState({\n        currentRecipe: event.target.value\n      });\n    };\n    this.addRecipe = () => {\n      const {\n        recipes,\n        currentRecipe\n      } = this.state;\n      if (currentRecipe.trim() === '') {\n        return;\n      }\n      const trimmedRecipeName = currentRecipe.trim();\n      const recipeIngredients = [...recipes[trimmedRecipeName]];\n      if (recipeIngredients) {\n        this.updateShoppingList(recipeIngredients);\n        this.addUsedIngredients(recipeIngredients);\n      } else {\n        const confirmAddRecipe = window.confirm('Recipe not found. Do you want to add it?');\n        if (confirmAddRecipe) {\n          this.addNewRecipe(trimmedRecipeName);\n        }\n      }\n    };\n    this.updateShoppingList = ingredients => {\n      const {\n        ownedIngredients,\n        usedIngredients\n      } = this.state;\n      const updatedShoppingList = {\n        ...this.state.shoppingList\n      };\n      ingredients.forEach(ingredient => {\n        const spaceIndex = ingredient.indexOf(' ');\n        let quantity;\n        let ingredientName;\n        if (spaceIndex === -1) {\n          quantity = '1';\n          ingredientName = ingredient;\n        } else {\n          quantity = ingredient.slice(0, spaceIndex);\n          ingredientName = ingredient.slice(spaceIndex + 1);\n        }\n        const parsedQuantity = this.parseQuantity(quantity);\n        const ownedQuantity = ownedIngredients[ingredientName] ? ownedIngredients[ingredientName].quantity : 0;\n        const usedQuantity = usedIngredients[ingredientName] ? usedIngredients[ingredientName] : 0;\n        const requiredQuantity = Math.max(parsedQuantity - ownedQuantity - usedQuantity, 0);\n        if (updatedShoppingList[ingredientName]) {\n          updatedShoppingList[ingredientName] += requiredQuantity;\n        } else {\n          updatedShoppingList[ingredientName] = requiredQuantity;\n        }\n      });\n      this.setState({\n        currentRecipe: '',\n        shoppingList: updatedShoppingList\n      }, () => {\n        this.updateLocalStorage();\n      });\n    };\n    this.clearShoppingList = () => {\n      this.setState({\n        shoppingList: {}\n      }, () => {\n        this.updateLocalStorage();\n      });\n    };\n    this.addRecipe = recipeName => {\n      const {\n        recipes,\n        ownedIngredients\n      } = this.state;\n      if (recipeName) {\n        const recipeIngredients = recipes[recipeName];\n        if (recipeIngredients) {\n          const updatedShoppingList = {\n            ...this.state.shoppingList\n          };\n          recipeIngredients.forEach(ingredient => {\n            const spaceIndex = ingredient.indexOf(' ');\n            let quantity;\n            let ingredientName;\n            if (spaceIndex === -1) {\n              quantity = '1';\n              ingredientName = ingredient;\n            } else {\n              quantity = ingredient.slice(0, spaceIndex);\n              ingredientName = ingredient.slice(spaceIndex + 1);\n            }\n            const parsedQuantity = this.parseQuantity(quantity);\n            if (!ownedIngredients[ingredientName]) {\n              if (!updatedShoppingList[ingredientName]) {\n                updatedShoppingList[ingredientName] = parsedQuantity;\n              } else {\n                updatedShoppingList[ingredientName] += parsedQuantity;\n              }\n            } else {\n              const remainingQuantity = updatedShoppingList[ingredientName] - ownedIngredients[ingredientName].quantity;\n              if (remainingQuantity > 0) {\n                updatedShoppingList[ingredientName] = remainingQuantity + parsedQuantity;\n              } else {\n                updatedShoppingList[ingredientName] = parsedQuantity;\n              }\n            }\n          });\n          this.setState({\n            currentRecipe: '',\n            shoppingList: updatedShoppingList\n          }, () => {\n            this.saveShoppingList();\n          });\n        }\n      }\n    };\n    this.parseQuantity = quantity => {\n      if (quantity.trim() === '') {\n        return 1; // Default to 1 if no quantity is provided\n      }\n\n      if (quantity.includes('/')) {\n        const [numerator, denominator] = quantity.split('/');\n        return parseFloat(numerator) / parseFloat(denominator);\n      }\n      return parseFloat(quantity);\n    };\n    this.handleOwnedIngredientChange = (ingredient, event) => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const quantity = event.target.value;\n      if (quantity === '0') {\n        const updatedOwnedIngredients = {\n          ...ownedIngredients\n        };\n        delete updatedOwnedIngredients[ingredient];\n        this.setState({\n          ownedIngredients: updatedOwnedIngredients\n        }, () => {\n          this.updateShoppingList();\n        });\n      } else {\n        this.setState(prevState => ({\n          ownedIngredients: {\n            ...prevState.ownedIngredients,\n            [ingredient]: {\n              quantity: parseInt(quantity)\n            }\n          }\n        }), () => {\n          this.updateShoppingList();\n        });\n      }\n    };\n    const storedRecipes = localStorage.getItem('recipes');\n    const storedShoppingList = localStorage.getItem('shoppingList');\n    const storedOwnedIngredients = localStorage.getItem('ownedIngredients');\n    const storedUsedIngredients = localStorage.getItem('usedIngredients');\n    this.state = {\n      recipes: storedRecipes ? JSON.parse(storedRecipes) : {\n        Pancakes: ['1 cup Flour', '1 cup Milk', '2 Eggs', '2 tbsp Butter', '1/4 tsp Salt', '1 tbsp Sugar'],\n        Salad: ['1 head Lettuce', '2 Tomatoes', '1 Cucumber', '1/2 Onion', '2 tbsp Olive Oil', '1 tbsp Vinegar', 'Salt', 'Pepper']\n      },\n      currentRecipe: '',\n      shoppingList: storedShoppingList ? JSON.parse(storedShoppingList) : {},\n      ownedIngredients: storedOwnedIngredients ? JSON.parse(storedOwnedIngredients) : {},\n      usedIngredients: storedUsedIngredients ? JSON.parse(storedUsedIngredients) : {}\n    };\n  }\n  componentDidUpdate() {\n    this.updateLocalStorage();\n  }\n  render() {\n    const {\n      currentRecipe,\n      shoppingList,\n      recipes,\n      ownedIngredients\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Recipe App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: currentRecipe,\n          onChange: this.handleRecipeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addRecipe,\n          children: \"Add Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Shopping List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), Object.keys(shoppingList).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No items in the shopping list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Object.entries(shoppingList).map((_ref, index) => {\n              let [ingredient, quantity] = _ref;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [quantity, \" \", ingredient]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.clearShoppingList,\n            children: \"Clear Shopping List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Saved Recipes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), Object.keys(recipes).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No recipes stored\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Object.keys(recipes).map((recipeName, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.addRecipe(recipeName),\n            children: recipeName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Owned Ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), Object.keys(recipes).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No recipes stored\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Object.keys(recipes[currentRecipe] || {}).map((ingredient, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              value: ownedIngredients[ingredient] ? ownedIngredients[ingredient].quantity : '',\n              onChange: event => this.handleOwnedIngredientChange(ingredient, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: ingredient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RecipeApp;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RecipeApp","Component","constructor","props","updateLocalStorage","recipes","shoppingList","ownedIngredients","usedIngredients","state","localStorage","setItem","JSON","stringify","handleRecipeChange","event","setState","currentRecipe","target","value","addRecipe","trim","trimmedRecipeName","recipeIngredients","updateShoppingList","addUsedIngredients","confirmAddRecipe","window","confirm","addNewRecipe","ingredients","updatedShoppingList","forEach","ingredient","spaceIndex","indexOf","quantity","ingredientName","slice","parsedQuantity","parseQuantity","ownedQuantity","usedQuantity","requiredQuantity","Math","max","clearShoppingList","recipeName","remainingQuantity","saveShoppingList","includes","numerator","denominator","split","parseFloat","handleOwnedIngredientChange","updatedOwnedIngredients","prevState","parseInt","storedRecipes","getItem","storedShoppingList","storedOwnedIngredients","storedUsedIngredients","parse","Pancakes","Salad","componentDidUpdate","render","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","Object","keys","length","entries","map","_ref","index","min"],"sources":["/home/zhillyz/shoppingList/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass RecipeApp extends React.Component {\n  constructor(props) {\n    super(props);\n    const storedRecipes = localStorage.getItem('recipes');\n    const storedShoppingList = localStorage.getItem('shoppingList');\n    const storedOwnedIngredients = localStorage.getItem('ownedIngredients');\n    const storedUsedIngredients = localStorage.getItem('usedIngredients');\n\n    this.state = {\n      recipes: storedRecipes ? JSON.parse(storedRecipes) : {\n        Pancakes: ['1 cup Flour', '1 cup Milk', '2 Eggs', '2 tbsp Butter', '1/4 tsp Salt', '1 tbsp Sugar'],\n        Salad: ['1 head Lettuce', '2 Tomatoes', '1 Cucumber', '1/2 Onion', '2 tbsp Olive Oil', '1 tbsp Vinegar', 'Salt', 'Pepper'],\n      },\n      currentRecipe: '',\n      shoppingList: storedShoppingList ? JSON.parse(storedShoppingList) : {},\n      ownedIngredients: storedOwnedIngredients ? JSON.parse(storedOwnedIngredients) : {},\n      usedIngredients: storedUsedIngredients ? JSON.parse(storedUsedIngredients) : {},\n    };\n  }\n\n  componentDidUpdate() {\n    this.updateLocalStorage();\n  }\n\n  updateLocalStorage = () => {\n    const { recipes, shoppingList, ownedIngredients, usedIngredients } = this.state;\n    localStorage.setItem('recipes', JSON.stringify(recipes));\n    localStorage.setItem('shoppingList', JSON.stringify(shoppingList));\n    localStorage.setItem('ownedIngredients', JSON.stringify(ownedIngredients));\n    localStorage.setItem('usedIngredients', JSON.stringify(usedIngredients));\n  };\n\n  handleRecipeChange = (event) => {\n    this.setState({ currentRecipe: event.target.value });\n  };\n\n  addRecipe = () => {\n    const { recipes, currentRecipe } = this.state;\n\n    if (currentRecipe.trim() === '') {\n      return;\n    }\n\n    const trimmedRecipeName = currentRecipe.trim();\n    const recipeIngredients = [...recipes[trimmedRecipeName]];\n\n    if (recipeIngredients) {\n      this.updateShoppingList(recipeIngredients);\n      this.addUsedIngredients(recipeIngredients);\n    } else {\n      const confirmAddRecipe = window.confirm('Recipe not found. Do you want to add it?');\n      if (confirmAddRecipe) {\n        this.addNewRecipe(trimmedRecipeName);\n      }\n    }\n  };\n\n  updateShoppingList = (ingredients) => {\n    const { ownedIngredients, usedIngredients } = this.state;\n    const updatedShoppingList = { ...this.state.shoppingList };\n\n    ingredients.forEach((ingredient) => {\n      const spaceIndex = ingredient.indexOf(' ');\n      let quantity;\n      let ingredientName;\n\n      if (spaceIndex === -1) {\n        quantity = '1';\n        ingredientName = ingredient;\n      } else {\n        quantity = ingredient.slice(0, spaceIndex);\n        ingredientName = ingredient.slice(spaceIndex + 1);\n      }\n\n      const parsedQuantity = this.parseQuantity(quantity);\n      const ownedQuantity = ownedIngredients[ingredientName] ? ownedIngredients[ingredientName].quantity : 0;\n      const usedQuantity = usedIngredients[ingredientName] ? usedIngredients[ingredientName] : 0;\n\n      const requiredQuantity = Math.max(parsedQuantity - ownedQuantity - usedQuantity, 0);\n\n      if (updatedShoppingList[ingredientName]) {\n        updatedShoppingList[ingredientName] += requiredQuantity;\n      } else {\n        updatedShoppingList[ingredientName] = requiredQuantity;\n      }\n    });\n\n    this.setState(\n      {\n        currentRecipe: '',\n        shoppingList: updatedShoppingList,\n      },\n      () => {\n        this.updateLocalStorage();\n      }\n    );\n  };\n\n  clearShoppingList = () => {\n    this.setState({ shoppingList: {} }, () => {\n      this.updateLocalStorage();\n    });\n  };\n\n  addRecipe = (recipeName) => {\n    const { recipes, ownedIngredients } = this.state;\n  \n    if (recipeName) {\n      const recipeIngredients = recipes[recipeName];\n      if (recipeIngredients) {\n        const updatedShoppingList = { ...this.state.shoppingList };\n  \n        recipeIngredients.forEach((ingredient) => {\n          const spaceIndex = ingredient.indexOf(' ');\n          let quantity;\n          let ingredientName;\n  \n          if (spaceIndex === -1) {\n            quantity = '1';\n            ingredientName = ingredient;\n          } else {\n            quantity = ingredient.slice(0, spaceIndex);\n            ingredientName = ingredient.slice(spaceIndex + 1);\n          }\n  \n          const parsedQuantity = this.parseQuantity(quantity);\n  \n          if (!ownedIngredients[ingredientName]) {\n            if (!updatedShoppingList[ingredientName]) {\n              updatedShoppingList[ingredientName] = parsedQuantity;\n            } else {\n              updatedShoppingList[ingredientName] += parsedQuantity;\n            }\n          } else {\n            const remainingQuantity = updatedShoppingList[ingredientName] - ownedIngredients[ingredientName].quantity;\n            if (remainingQuantity > 0) {\n              updatedShoppingList[ingredientName] = remainingQuantity + parsedQuantity;\n            } else {\n              updatedShoppingList[ingredientName] = parsedQuantity;\n            }\n          }\n        });\n  \n        this.setState(\n          {\n            currentRecipe: '',\n            shoppingList: updatedShoppingList,\n          },\n          () => {\n            this.saveShoppingList();\n          }\n        );\n      }\n    }\n  };\n  \n\n  parseQuantity = (quantity) => {\n    if (quantity.trim() === '') {\n      return 1; // Default to 1 if no quantity is provided\n    }\n\n    if (quantity.includes('/')) {\n      const [numerator, denominator] = quantity.split('/');\n      return parseFloat(numerator) / parseFloat(denominator);\n    }\n\n    return parseFloat(quantity);\n  };\n\n  handleOwnedIngredientChange = (ingredient, event) => {\n    const { ownedIngredients } = this.state;\n    const quantity = event.target.value;\n  \n    if (quantity === '0') {\n      const updatedOwnedIngredients = { ...ownedIngredients };\n      delete updatedOwnedIngredients[ingredient];\n      this.setState({ ownedIngredients: updatedOwnedIngredients }, () => {\n        this.updateShoppingList();\n      });\n    } else {\n      this.setState(\n        (prevState) => ({\n          ownedIngredients: {\n            ...prevState.ownedIngredients,\n            [ingredient]: {\n              quantity: parseInt(quantity),\n            },\n          },\n        }),\n        () => {\n          this.updateShoppingList();\n        }\n      );\n    }\n  };\n  \n\n  render() {\n    const { currentRecipe, shoppingList, recipes, ownedIngredients } = this.state;\n  \n    return (\n      <div>\n        <h1>Recipe App</h1>\n        <div>\n          <input type=\"text\" value={currentRecipe} onChange={this.handleRecipeChange} />\n          <button onClick={this.addRecipe}>Add Recipe</button>\n        </div>\n        <div>\n          <h2>Shopping List</h2>\n          {Object.keys(shoppingList).length === 0 ? (\n            <p>No items in the shopping list</p>\n          ) : (\n            <div>\n              <ul>\n                {Object.entries(shoppingList).map(([ingredient, quantity], index) => (\n                  <li key={index}>\n                    {quantity} {ingredient}\n                  </li>\n                ))}\n              </ul>\n              <button onClick={this.clearShoppingList}>Clear Shopping List</button>\n            </div>\n          )}\n        </div>\n        <div>\n          <h2>Saved Recipes</h2>\n          {Object.keys(recipes).length === 0 ? (\n            <p>No recipes stored</p>\n          ) : (\n            <div>\n              {Object.keys(recipes).map((recipeName, index) => (\n                <button key={index} onClick={() => this.addRecipe(recipeName)}>\n                  {recipeName}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n        <div>\n          <h2>Owned Ingredients</h2>\n          {Object.keys(recipes).length === 0 ? (\n            <p>No recipes stored</p>\n          ) : (\n            <div>\n              {Object.keys(recipes[currentRecipe] || {}).map((ingredient, index) => (\n                <div key={index}>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    value={ownedIngredients[ingredient] ? ownedIngredients[ingredient].quantity : ''}\n                    onChange={(event) => this.handleOwnedIngredientChange(ingredient, event)}\n                  />\n                  <span>{ingredient}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default RecipeApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}