{"ast":null,"code":"var _jsxFileName = \"/home/zhillyz/shoppingList/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RecipeApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleRecipeChange = event => {\n      this.setState({\n        currentRecipe: event.target.value\n      });\n    };\n    /**\n     * Adds an owned ingredient based on user input.\n     */\n    this.addOwnedIngredient = () => {\n      // Prompt the user to enter the ingredient and quantity\n      const getUserInput = this.getUserInput();\n      const quantity = getUserInput.quantity;\n      const ingredient = getUserInput.ingredient;\n      if (ingredient && quantity) {\n        // Retrieve the shoppingList and ownedIngredients from the state\n        const {\n          shoppingList,\n          ownedIngredients\n        } = this.state;\n        const updatedShoppingList = {\n          ...shoppingList\n        };\n        const updatedOwnedIngredients = {\n          ...ownedIngredients\n        };\n        if (updatedOwnedIngredients[ingredient]) {\n          // If the ingredient is already in the ownedIngredients, update the remaining quantity\n          updatedOwnedIngredients[ingredient].remaining += parseFloat(quantity);\n        } else {\n          // If the ingredient is not in the ownedIngredients, create a new entry with the used and remaining quantities\n          updatedOwnedIngredients[ingredient] = {\n            used: 0,\n            remaining: parseFloat(quantity)\n          };\n        }\n        if (updatedShoppingList[ingredient]) {\n          // Calculate the remaining quantity needed for the shopping list\n          const neededQuantity = Math.max(updatedShoppingList[ingredient] - updatedOwnedIngredients[ingredient].remaining, 0);\n          const oldRemaining = updatedOwnedIngredients[ingredient].remaining;\n          const oldUsed = updatedOwnedIngredients[ingredient].used;\n          if (neededQuantity > 0) {\n            // Update the shopping list if there's still a need for the ingredient\n            updatedShoppingList[ingredient] = neededQuantity;\n            updatedOwnedIngredients[ingredient] = {\n              used: oldUsed + oldRemaining,\n              remaining: 0\n            };\n          } else {\n            // If the needed quantity is zero or less, remove the ingredient from the shopping list\n            updatedOwnedIngredients[ingredient] = {\n              used: oldUsed + updatedShoppingList[ingredient],\n              remaining: oldRemaining - updatedShoppingList[ingredient]\n            };\n            delete updatedShoppingList[ingredient];\n          }\n        }\n\n        // Update the state with the updated shoppingList and ownedIngredients\n        this.setState({\n          shoppingList: updatedShoppingList,\n          ownedIngredients: updatedOwnedIngredients\n        });\n      }\n    };\n    this.handleStoredRecipeClick = recipeName => {\n      const {\n        recipes\n      } = this.state;\n      const recipeIngredients = recipes[recipeName];\n      if (recipeIngredients) {\n        this.updateShoppingListFromRecipe(recipeIngredients);\n      }\n    };\n    this.deleteRecipe = recipeName => {\n      const {\n        recipes\n      } = this.state;\n      const updatedRecipes = {\n        ...recipes\n      };\n      delete updatedRecipes[recipeName];\n      this.setState({\n        recipes: updatedRecipes\n      });\n    };\n    this.addRecipe = () => {\n      const {\n        recipes,\n        currentRecipe\n      } = this.state;\n      if (currentRecipe.trim() === '') {\n        return;\n      }\n      const recipeIngredients = recipes[currentRecipe];\n      if (recipeIngredients) {\n        this.updateShoppingList(recipeIngredients);\n      } else {\n        const confirmAddRecipe = window.confirm('Recipe not found. Do you want to add it?');\n        if (confirmAddRecipe) {\n          this.addNewRecipe(currentRecipe);\n        }\n      }\n    };\n    this.updateShoppingListFromRecipe = ingredients => {\n      // Retrieve the ownedIngredients and shoppingList from the state\n      const {\n        ownedIngredients,\n        shoppingList\n      } = this.state;\n      const updatedShoppingList = {\n        ...shoppingList\n      };\n      const updatedOwnedIngredients = {\n        ...ownedIngredients\n      };\n\n      // Loop through each ingredient\n      ingredients.forEach(ingredient => {\n        var _ownedIngredients$ing;\n        const spaceIndex = ingredient.indexOf(' ');\n        let quantity;\n        let ingredientName;\n\n        // Check if the ingredient has a quantity specified or not\n        if (spaceIndex === -1) {\n          // Default quantity is 1 if not specified\n          quantity = '1';\n          ingredientName = ingredient;\n        } else {\n          // Extract the quantity and ingredient name from the string\n          quantity = ingredient.slice(0, spaceIndex);\n          ingredientName = ingredient.slice(spaceIndex + 1);\n        }\n\n        // Parse the quantity to a numeric value\n        const parsedQuantity = this.parseQuantity(quantity);\n        const ownedQuantity = ((_ownedIngredients$ing = ownedIngredients[ingredientName]) === null || _ownedIngredients$ing === void 0 ? void 0 : _ownedIngredients$ing.remaining) || 0;\n\n        // Calculate the remaining quantity needed for the ingredient\n        const neededQuantity = parsedQuantity - ownedQuantity;\n\n        // Update the shopping list if there's still a need for the ingredient\n        if (neededQuantity > 0) {\n          updatedShoppingList[ingredientName] = (updatedShoppingList[ingredientName] || 0) + neededQuantity;\n        }\n\n        // Update owned ingredient quantities\n        if (ownedQuantity > 0 && neededQuantity < 0) {\n          updatedOwnedIngredients[ingredientName].remaining = Math.abs(neededQuantity);\n          updatedOwnedIngredients[ingredientName].used += parsedQuantity;\n        } else if (ownedQuantity > 0) {\n          updatedOwnedIngredients[ingredientName].used += updatedOwnedIngredients[ingredientName].remaining;\n          updatedOwnedIngredients[ingredientName].remaining = 0;\n        }\n      });\n\n      // Update the state with the updated shopping list, owned ingredients, and current recipe\n      this.setState({\n        currentRecipe: '',\n        shoppingList: updatedShoppingList,\n        ownedIngredients: updatedOwnedIngredients\n      }, () => {\n        // After updating the state, trigger the renderShoppingList function\n        this.renderShoppingList();\n      });\n    };\n    this.addNewRecipe = recipeName => {\n      const ingredients = window.prompt('Enter the ingredients (separated by commas):');\n      if (ingredients) {\n        const recipeIngredients = ingredients.split(',').map(ingredient => ingredient.trim());\n        const {\n          recipes\n        } = this.state;\n        const updatedRecipes = {\n          ...recipes,\n          [recipeName]: recipeIngredients\n        };\n        this.setState({\n          recipes: updatedRecipes\n        }, () => {\n          this.updateShoppingList(recipeIngredients);\n        });\n      }\n    };\n    this.clearShoppingList = () => {\n      this.setState({\n        shoppingList: {}\n      });\n    };\n    this.parseQuantity = quantity => {\n      if (quantity.trim() === '') {\n        return 1; // Default to 1 if no quantity is provided\n      }\n\n      if (quantity.includes('/')) {\n        const [numerator, denominator] = quantity.split('/');\n        return parseFloat(numerator) / parseFloat(denominator);\n      }\n      return parseFloat(quantity);\n    };\n    this.removeOwnedIngredient = ingredient => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const updatedIngredients = {\n        ...ownedIngredients\n      };\n      delete updatedIngredients[ingredient];\n      this.setState({\n        ownedIngredients: updatedIngredients\n      });\n    };\n    this.renderOwnedIngredients = () => {\n      const {\n        ownedIngredients\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.entries(ownedIngredients).map((_ref, index) => {\n          let [ingredient, quantity] = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"owned-ingredient\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient\",\n              children: ingredient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: quantity.used,\n              onChange: event => this.handleOwnedIngredientUsedChange(event, ingredient),\n              className: \"red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: quantity.remaining,\n              onChange: event => this.handleOwnedIngredientRemainingChange(event, ingredient),\n              className: \"green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.removeOwnedIngredient(ingredient),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }, this);\n    };\n    this.handleOwnedIngredientUsedChange = (event, ingredient) => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const used = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n      const updatedOwnedIngredients = {\n        ...ownedIngredients,\n        [ingredient]: {\n          ...ownedIngredients[ingredient],\n          used\n        }\n      };\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      });\n    };\n    this.handleOwnedIngredientChange = (event, ingredient) => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const quantity = event.target.value.trim() === '' ? '' : parseInt(event.target.value, 10);\n      const updatedOwnedIngredients = {\n        ...ownedIngredients,\n        [ingredient]: {\n          ...ownedIngredients[ingredient],\n          remaining: quantity // Update the `remaining` property instead of the whole ingredient value\n        }\n      };\n\n      // Calculate the new used quantity based on the updated remaining quantity\n      const currentQuantity = updatedOwnedIngredients[ingredient];\n      if (currentQuantity) {\n        const newUsed = Math.max(currentQuantity.used - currentQuantity.remaining + quantity, 0);\n        currentQuantity.used = newUsed;\n      }\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      }, () => {\n        this.updateShoppingListFromOwned();\n      });\n    };\n    /**\n     * Handles the change event for the remaining quantity of an owned ingredient.\n     * @param {Event} event - The change event object.\n     * @param {string} ingredient - The name of the ingredient being updated.\n     */\n    this.handleOwnedIngredientRemainingChange = (event, ingredient) => {\n      // Retrieve the ownedIngredients from the state\n      const {\n        ownedIngredients\n      } = this.state;\n\n      // Extract the remaining quantity value from the event target\n      const remaining = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n\n      // Create a copy of the ownedIngredients with the updated remaining quantity for the specified ingredient\n      const updatedOwnedIngredients = {\n        ...ownedIngredients,\n        [ingredient]: {\n          ...ownedIngredients[ingredient],\n          remaining\n        }\n      };\n\n      // Update the state with the updated ownedIngredients\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      });\n      this.renderShoppingList();\n    };\n    this.updateOwnedIngredientsExit = () => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const updatedOwnedIngredients = {\n        ...ownedIngredients\n      };\n      Object.keys(updatedOwnedIngredients).forEach(key => {\n        updatedOwnedIngredients[key].used = 0;\n      });\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      });\n      window.close();\n    };\n    this.renderShoppingList = () => {\n      const {\n        shoppingList,\n        ownedIngredients\n      } = this.state;\n      return Object.keys(shoppingList).map((ingredientName, index) => {\n        var _ownedIngredients$ing2;\n        const shoppingQuantity = shoppingList[ingredientName];\n        const ownedQuantity = ((_ownedIngredients$ing2 = ownedIngredients[ingredientName]) === null || _ownedIngredients$ing2 === void 0 ? void 0 : _ownedIngredients$ing2.remaining) || 0;\n        const remainingQuantity = shoppingQuantity - ownedQuantity;\n        if (remainingQuantity <= 0) {\n          return null; // Skip rendering if the ingredient is fully owned\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [remainingQuantity, \" \", ingredientName]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 9\n        }, this);\n      });\n    };\n    const storedRecipes = localStorage.getItem('recipes');\n    const storedShoppingList = localStorage.getItem('shoppingList');\n    const storedOwnedIngredients = localStorage.getItem('ownedIngredients');\n    this.state = {\n      recipes: storedRecipes ? JSON.parse(storedRecipes) : {\n        Pancakes: ['1 cup Flour', '1 cup Milk', '2 Eggs', '2 tbsp Butter', '1/4 tsp Salt', '1 tbsp Sugar'],\n        Salad: ['1 head Lettuce', '2 Tomatoes', '1 Cucumber', '1/2 Onion', '2 tbsp Olive Oil', '1 tbsp Vinegar', 'Salt', 'Pepper']\n      },\n      currentRecipe: '',\n      shoppingList: storedShoppingList ? JSON.parse(storedShoppingList) : {},\n      ownedIngredients: storedOwnedIngredients ? JSON.parse(storedOwnedIngredients) : {}\n    };\n  }\n  componentDidUpdate() {\n    localStorage.setItem('recipes', JSON.stringify(this.state.recipes));\n    localStorage.setItem('shoppingList', JSON.stringify(this.state.shoppingList));\n    localStorage.setItem('ownedIngredients', JSON.stringify(this.state.ownedIngredients));\n  }\n  containsNumberAndIngredient(input) {\n    const regex = /^\\d+\\s+\\w+/; // Matches a number followed by a space and a word character (\\w)\n    return regex.test(input);\n  }\n  // Function to prompt user for input\n  getUserInput() {\n    const userInput = prompt('Enter an ingredient or a quantity followed by an ingredient:');\n    if (this.containsNumberAndIngredient(userInput)) {\n      // If the input contains a number followed by an ingredient\n      const match = userInput.match(/^(\\d+)\\s+(.+)/); // Match the quantity and ingredient\n      if (match) {\n        const quantity = parseFloat(match[1]); // Extract the quantity\n        const ingredient = match[2].trim(); // Extract the ingredient and remove leading/trailing spaces\n        return {\n          quantity,\n          ingredient\n        };\n      }\n    } else {\n      // If the input is just an ingredient\n      const quantity = parseFloat(prompt('Enter the quantity for the ingredient:'));\n      return {\n        quantity,\n        ingredient: userInput.trim()\n      }; // Remove leading/trailing spaces from the ingredient\n    }\n\n    // If the input format is invalid or the user cancels the prompt\n    return null;\n  }\n  render() {\n    const {\n      currentRecipe,\n      shoppingList,\n      recipes,\n      ownedIngredients\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Recipe App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-receipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: currentRecipe,\n          onChange: this.handleRecipeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addRecipe,\n          children: \"Add Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shopping-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Shopping List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), Object.keys(shoppingList).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No items in the shopping list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Object.entries(shoppingList).map((_ref2, index) => {\n              let [ingredient, quantity] = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [quantity, \" \", ingredient]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.clearShoppingList,\n            children: \"Clear Shopping List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stored-recipes\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Stored Recipes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), Object.keys(recipes).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No recipes stored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: Object.keys(recipes).map((recipeName, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recipe-box\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"recipe-name\",\n                children: recipeName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add-button\",\n                onClick: () => this.handleStoredRecipeClick(recipeName),\n                children: \"Add to Shopping List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => this.deleteRecipe(recipeName),\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"owned-ingredients\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Owned Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"owned-ingredient\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient-heading\",\n              children: \"Ingredient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"quantity-heading\",\n              children: \"Used\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"quantity-heading\",\n              children: \"Remaining\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-heading\",\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), this.renderOwnedIngredients(), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.addOwnedIngredient,\n            children: \"Add Ingredient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.updateOwnedIngredientsExit,\n            children: \"Save updated owned ingredients and exit.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RecipeApp;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RecipeApp","Component","constructor","props","handleRecipeChange","event","setState","currentRecipe","target","value","addOwnedIngredient","getUserInput","quantity","ingredient","shoppingList","ownedIngredients","state","updatedShoppingList","updatedOwnedIngredients","remaining","parseFloat","used","neededQuantity","Math","max","oldRemaining","oldUsed","handleStoredRecipeClick","recipeName","recipes","recipeIngredients","updateShoppingListFromRecipe","deleteRecipe","updatedRecipes","addRecipe","trim","updateShoppingList","confirmAddRecipe","window","confirm","addNewRecipe","ingredients","forEach","_ownedIngredients$ing","spaceIndex","indexOf","ingredientName","slice","parsedQuantity","parseQuantity","ownedQuantity","abs","renderShoppingList","prompt","split","map","clearShoppingList","includes","numerator","denominator","removeOwnedIngredient","updatedIngredients","renderOwnedIngredients","children","Object","entries","_ref","index","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","handleOwnedIngredientUsedChange","handleOwnedIngredientRemainingChange","onClick","parseInt","handleOwnedIngredientChange","currentQuantity","newUsed","updateShoppingListFromOwned","updateOwnedIngredientsExit","keys","key","close","_ownedIngredients$ing2","shoppingQuantity","remainingQuantity","storedRecipes","localStorage","getItem","storedShoppingList","storedOwnedIngredients","JSON","parse","Pancakes","Salad","componentDidUpdate","setItem","stringify","containsNumberAndIngredient","input","regex","test","userInput","match","render","length","_ref2"],"sources":["/home/zhillyz/shoppingList/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass RecipeApp extends React.Component {\n  constructor(props) {\n    super(props);\n    const storedRecipes = localStorage.getItem('recipes');\n    const storedShoppingList = localStorage.getItem('shoppingList');\n    const storedOwnedIngredients = localStorage.getItem('ownedIngredients');\n\n    this.state = {\n      recipes: storedRecipes ? JSON.parse(storedRecipes) : {\n        Pancakes: ['1 cup Flour', '1 cup Milk', '2 Eggs', '2 tbsp Butter', '1/4 tsp Salt', '1 tbsp Sugar'],\n        Salad: ['1 head Lettuce', '2 Tomatoes', '1 Cucumber', '1/2 Onion', '2 tbsp Olive Oil', '1 tbsp Vinegar', 'Salt', 'Pepper'],\n      },\n      currentRecipe: '',\n      shoppingList: storedShoppingList ? JSON.parse(storedShoppingList) : {},\n      ownedIngredients: storedOwnedIngredients ? JSON.parse(storedOwnedIngredients) : {},\n    };\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('recipes', JSON.stringify(this.state.recipes));\n    localStorage.setItem('shoppingList', JSON.stringify(this.state.shoppingList));\n    localStorage.setItem('ownedIngredients', JSON.stringify(this.state.ownedIngredients));\n  };\n\n  handleRecipeChange = (event) => {\n    this.setState({ currentRecipe: event.target.value });\n  };\n\n  containsNumberAndIngredient(input) {\n    const regex = /^\\d+\\s+\\w+/; // Matches a number followed by a space and a word character (\\w)\n    return regex.test(input);\n  };\n\n  // Function to prompt user for input\n  getUserInput() {\n    const userInput = prompt('Enter an ingredient or a quantity followed by an ingredient:');\n  \n    if (this.containsNumberAndIngredient(userInput)) {\n      // If the input contains a number followed by an ingredient\n      const match = userInput.match(/^(\\d+)\\s+(.+)/); // Match the quantity and ingredient\n      if (match) {\n        const quantity = parseFloat(match[1]); // Extract the quantity\n        const ingredient = match[2].trim(); // Extract the ingredient and remove leading/trailing spaces\n        return { quantity, ingredient };\n      }\n    } else {\n      // If the input is just an ingredient\n      const quantity = parseFloat(prompt('Enter the quantity for the ingredient:'));\n      return { quantity, ingredient: userInput.trim() }; // Remove leading/trailing spaces from the ingredient\n    }\n    \n    // If the input format is invalid or the user cancels the prompt\n    return null;\n  };\n  \n\n  /**\n   * Adds an owned ingredient based on user input.\n   */\n  addOwnedIngredient = () => {\n    // Prompt the user to enter the ingredient and quantity\n    const getUserInput = this.getUserInput();\n    const quantity = getUserInput.quantity\n    const ingredient = getUserInput.ingredient\n  \n    if (ingredient && quantity) {\n      // Retrieve the shoppingList and ownedIngredients from the state\n      const { shoppingList, ownedIngredients } = this.state;\n      const updatedShoppingList = { ...shoppingList };\n      const updatedOwnedIngredients = { ...ownedIngredients };\n  \n      if (updatedOwnedIngredients[ingredient]) {\n        // If the ingredient is already in the ownedIngredients, update the remaining quantity\n        updatedOwnedIngredients[ingredient].remaining += parseFloat(quantity);\n      } else {\n        // If the ingredient is not in the ownedIngredients, create a new entry with the used and remaining quantities\n        updatedOwnedIngredients[ingredient] = {\n          used: 0,\n          remaining: parseFloat(quantity),\n        };\n      }\n  \n      if (updatedShoppingList[ingredient]) {\n        // Calculate the remaining quantity needed for the shopping list\n        const neededQuantity = Math.max(updatedShoppingList[ingredient] - updatedOwnedIngredients[ingredient].remaining,0);\n        const oldRemaining = updatedOwnedIngredients[ingredient].remaining\n        const oldUsed = updatedOwnedIngredients[ingredient].used\n  \n        if (neededQuantity > 0) {\n          // Update the shopping list if there's still a need for the ingredient\n          updatedShoppingList[ingredient] = neededQuantity;\n          updatedOwnedIngredients[ingredient] = {\n            used: oldUsed + oldRemaining,\n            remaining: 0,\n          };\n        } else {\n          // If the needed quantity is zero or less, remove the ingredient from the shopping list\n          updatedOwnedIngredients[ingredient] = {\n            used: oldUsed + updatedShoppingList[ingredient],\n            remaining: oldRemaining-updatedShoppingList[ingredient],\n          };\n          delete updatedShoppingList[ingredient];\n        }\n      }\n  \n      // Update the state with the updated shoppingList and ownedIngredients\n      this.setState(\n        {\n          shoppingList: updatedShoppingList,\n          ownedIngredients: updatedOwnedIngredients,\n        }\n      );\n    }\n  };\n\n  handleStoredRecipeClick = (recipeName) => {\n    const { recipes } = this.state;\n    const recipeIngredients = recipes[recipeName];\n    if (recipeIngredients) {\n      this.updateShoppingListFromRecipe(recipeIngredients);\n    }\n  };\n  \n  deleteRecipe = (recipeName) => {\n    const { recipes } = this.state;\n    const updatedRecipes = { ...recipes };\n    delete updatedRecipes[recipeName];\n    this.setState({ recipes: updatedRecipes });\n  };\n\n  addRecipe = () => {\n    const { recipes, currentRecipe } = this.state;\n\n    if (currentRecipe.trim() === '') {\n      return;\n    }\n\n    const recipeIngredients = recipes[currentRecipe];\n    if (recipeIngredients) {\n      this.updateShoppingList(recipeIngredients);\n    } else {\n      const confirmAddRecipe = window.confirm('Recipe not found. Do you want to add it?');\n      if (confirmAddRecipe) {\n        this.addNewRecipe(currentRecipe);\n      }\n    }\n  };\n\n  updateShoppingListFromRecipe = (ingredients) => {\n    // Retrieve the ownedIngredients and shoppingList from the state\n    const { ownedIngredients,shoppingList } = this.state;\n    const updatedShoppingList = { ...shoppingList };\n    const updatedOwnedIngredients = { ...ownedIngredients };\n  \n    // Loop through each ingredient\n    ingredients.forEach((ingredient) => {\n      const spaceIndex = ingredient.indexOf(' ');\n      let quantity;\n      let ingredientName;\n  \n      // Check if the ingredient has a quantity specified or not\n      if (spaceIndex === -1) {\n        // Default quantity is 1 if not specified\n        quantity = '1';\n        ingredientName = ingredient;\n      } else {\n        // Extract the quantity and ingredient name from the string\n        quantity = ingredient.slice(0, spaceIndex);\n        ingredientName = ingredient.slice(spaceIndex + 1);\n      }\n  \n      // Parse the quantity to a numeric value\n      const parsedQuantity = this.parseQuantity(quantity);\n      const ownedQuantity = ownedIngredients[ingredientName]?.remaining || 0;\n  \n      // Calculate the remaining quantity needed for the ingredient\n      const neededQuantity = parsedQuantity - ownedQuantity;\n  \n      // Update the shopping list if there's still a need for the ingredient\n      if (neededQuantity > 0) {\n        updatedShoppingList[ingredientName] = (updatedShoppingList[ingredientName] || 0) + neededQuantity;\n      }\n  \n      // Update owned ingredient quantities\n      if (ownedQuantity > 0 && neededQuantity < 0) {\n        updatedOwnedIngredients[ingredientName].remaining = Math.abs(neededQuantity);\n        updatedOwnedIngredients[ingredientName].used += parsedQuantity;\n      } else if (ownedQuantity > 0){\n        updatedOwnedIngredients[ingredientName].used += updatedOwnedIngredients[ingredientName].remaining\n        updatedOwnedIngredients[ingredientName].remaining = 0;\n      }\n      \n    });\n  \n    // Update the state with the updated shopping list, owned ingredients, and current recipe\n    this.setState(\n      {\n        currentRecipe: '',\n        shoppingList: updatedShoppingList,\n        ownedIngredients: updatedOwnedIngredients,\n      },\n      () => {\n        // After updating the state, trigger the renderShoppingList function\n        this.renderShoppingList();\n      }\n    );\n  };\n\n  addNewRecipe = (recipeName) => {\n    const ingredients = window.prompt('Enter the ingredients (separated by commas):');\n\n    if (ingredients) {\n      const recipeIngredients = ingredients.split(',').map((ingredient) => ingredient.trim());\n      const { recipes } = this.state;\n\n      const updatedRecipes = { ...recipes, [recipeName]: recipeIngredients };\n      this.setState({ recipes: updatedRecipes }, () => {\n        this.updateShoppingList(recipeIngredients);\n      });\n    }\n  };\n\n  clearShoppingList = () => {\n    this.setState({ shoppingList: {} });\n  };\n\n  parseQuantity = (quantity) => {\n    if (quantity.trim() === '') {\n      return 1; // Default to 1 if no quantity is provided\n    }\n\n    if (quantity.includes('/')) {\n      const [numerator, denominator] = quantity.split('/');\n      return parseFloat(numerator) / parseFloat(denominator);\n    }\n\n    return parseFloat(quantity);\n  };\n\n  removeOwnedIngredient = (ingredient) => {\n    const { ownedIngredients } = this.state;\n    const updatedIngredients = { ...ownedIngredients };\n  \n    delete updatedIngredients[ingredient];\n  \n    this.setState({ ownedIngredients: updatedIngredients });\n  };\n\n  renderOwnedIngredients = () => {\n    const { ownedIngredients } = this.state;\n  \n    return (\n      <div>\n        {Object.entries(ownedIngredients).map(([ingredient, quantity], index) => {\n          return (\n            <div key={index} className=\"owned-ingredient\">\n              <div className=\"ingredient\">{ingredient}</div>\n              <input\n                type=\"number\"\n                value={quantity.used}\n                onChange={(event) => this.handleOwnedIngredientUsedChange(event, ingredient)}\n                className='red'\n              />\n              <input\n                type=\"number\"\n                value={quantity.remaining}\n                onChange={(event) => this.handleOwnedIngredientRemainingChange(event, ingredient)}\n                className='green'\n              />\n              <button onClick={() => this.removeOwnedIngredient(ingredient)}>Remove</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };  \n\n  handleOwnedIngredientUsedChange = (event, ingredient) => {\n    const { ownedIngredients } = this.state;\n    const used = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n    const updatedOwnedIngredients = {\n      ...ownedIngredients,\n      [ingredient]: {\n        ...ownedIngredients[ingredient],\n        used,\n      },\n    };\n  \n    this.setState({ ownedIngredients: updatedOwnedIngredients });\n  };\n\n  \n  handleOwnedIngredientChange = (event, ingredient) => {\n    const { ownedIngredients } = this.state;\n    const quantity = event.target.value.trim() === '' ? '' : parseInt(event.target.value, 10);\n  \n    const updatedOwnedIngredients = {\n      ...ownedIngredients,\n      [ingredient]: {\n        ...ownedIngredients[ingredient],\n        remaining: quantity, // Update the `remaining` property instead of the whole ingredient value\n      },\n    };\n  \n    // Calculate the new used quantity based on the updated remaining quantity\n    const currentQuantity = updatedOwnedIngredients[ingredient];\n    if (currentQuantity) {\n      const newUsed = Math.max(currentQuantity.used - currentQuantity.remaining + quantity, 0);\n      currentQuantity.used = newUsed;\n    }\n  \n    this.setState({ ownedIngredients: updatedOwnedIngredients }, () => {\n      this.updateShoppingListFromOwned();\n    });\n  };\n\n  /**\n   * Handles the change event for the remaining quantity of an owned ingredient.\n   * @param {Event} event - The change event object.\n   * @param {string} ingredient - The name of the ingredient being updated.\n   */\n  handleOwnedIngredientRemainingChange = (event, ingredient) => {\n    // Retrieve the ownedIngredients from the state\n    const { ownedIngredients } = this.state;\n\n    // Extract the remaining quantity value from the event target\n    const remaining = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n\n    // Create a copy of the ownedIngredients with the updated remaining quantity for the specified ingredient\n    const updatedOwnedIngredients = {\n      ...ownedIngredients,\n      [ingredient]: {\n        ...ownedIngredients[ingredient],\n        remaining,\n      },\n    };\n\n    // Update the state with the updated ownedIngredients\n    this.setState({ ownedIngredients: updatedOwnedIngredients });\n    this.renderShoppingList()\n  };\n\n  updateOwnedIngredientsExit = () => {\n    const { ownedIngredients } = this.state;\n    const updatedOwnedIngredients = { ...ownedIngredients };\n  \n    Object.keys(updatedOwnedIngredients).forEach(key => {\n      updatedOwnedIngredients[key].used = 0;\n    });\n  \n    this.setState({\n      ownedIngredients: updatedOwnedIngredients,\n    });\n    window.close()\n  };\n  \n\n  renderShoppingList = () => {\n    const { shoppingList, ownedIngredients } = this.state;\n\n    return Object.keys(shoppingList).map((ingredientName, index) => {\n      const shoppingQuantity = shoppingList[ingredientName];\n      const ownedQuantity = ownedIngredients[ingredientName]?.remaining|| 0;\n      const remainingQuantity = shoppingQuantity - ownedQuantity;\n\n      if (remainingQuantity <= 0) {\n        return null; // Skip rendering if the ingredient is fully owned\n      }\n\n      return (\n        <div key={index}>\n          {remainingQuantity} {ingredientName}\n        </div>\n      );\n    });\n  };\n\n  render() {\n    const { currentRecipe, shoppingList, recipes, ownedIngredients } = this.state;\n  \n    return (\n      <div className=\"center-container\">\n        <h1>Recipe App</h1>\n        <div className=\"add-receipe-container\">\n          <input type=\"text\" value={currentRecipe} onChange={this.handleRecipeChange} />\n          <button onClick={this.addRecipe}>Add Recipe</button>\n        </div>\n        <div className=\"shopping-list\">\n          <h2>Shopping List</h2>\n          {Object.keys(shoppingList).length === 0 ? (\n            <p>No items in the shopping list</p>\n          ) : (\n            <div>\n              <ul>\n                {Object.entries(shoppingList).map(([ingredient, quantity], index) => (\n                  <li key={index}>\n                    {quantity} {ingredient}\n                  </li>\n                ))}\n              </ul>\n              <button onClick={this.clearShoppingList}>Clear Shopping List</button>\n            </div>\n          )}\n        </div>\n        <div className=\"recipe-container\">\n          <div className=\"stored-recipes\">\n            <h2>Stored Recipes</h2>\n            {Object.keys(recipes).length === 0 ? (\n              <p>No recipes stored</p>\n            ) : (\n              <div>\n                {Object.keys(recipes).map((recipeName, index) => (\n                  <div key={index} className=\"recipe-box\">\n                    <span className=\"recipe-name\">{recipeName}</span>\n                    <button className=\"add-button\" onClick={() => this.handleStoredRecipeClick(recipeName)}>\n                      Add to Shopping List\n                    </button>\n                    <button className=\"delete-button\" onClick={() => this.deleteRecipe(recipeName)}>\n                      &times;\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"owned-ingredients\">\n            <h2>Owned Ingredients</h2>\n              <div className=\"owned-ingredient\">\n                <div className=\"ingredient-heading\">Ingredient</div>\n                <div className=\"quantity-heading\">Used</div>\n                <div className=\"quantity-heading\">Remaining</div>\n                <div className=\"action-heading\">Action</div>\n              </div>\n            {this.renderOwnedIngredients()} {/* Render owned ingredients using the method */}\n            <button onClick={this.addOwnedIngredient}>Add Ingredient</button>\n            <button onClick={this.updateOwnedIngredientsExit}>Save updated owned ingredients and exit.</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  \n}\n\nexport default RecipeApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}