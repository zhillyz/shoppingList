{"ast":null,"code":"var _ = require('underscore');\nvar longestCommonSubstring = require('longest-common-substring');\nvar diff = function (before, after) {\n  var commonSeq = longestCommonSubstring(before, after);\n  var startBefore = commonSeq.startString1;\n  var startAfter = commonSeq.startString2;\n  if (commonSeq.length == 0) {\n    var result = before.map(function (each) {\n      return ['-', each];\n    });\n    return result.concat(after.map(function (each) {\n      return ['+', each];\n    }));\n  }\n  var beforeLeft = before.slice(0, startBefore);\n  var afterLeft = after.slice(0, startAfter);\n  var equal = after.slice(startAfter, startAfter + commonSeq.length).map(function (each) {\n    return ['=', each];\n  });\n  var beforeRight = before.slice(startBefore + commonSeq.length);\n  var afterRight = after.slice(startAfter + commonSeq.length);\n  return _.union(diff(beforeLeft, afterLeft), equal, diff(beforeRight, afterRight));\n};\nvar orderedSetDiff = function (before, after) {\n  var diffRes = diff(before, after);\n  var result = [];\n  diffRes.forEach(function (each) {\n    switch (each[0]) {\n      case '=':\n        result.push(each);\n        break;\n      case '-':\n        result.push(after.indexOf(each[1]) > -1 ? ['x', each[1]] : ['-', each[1]]);\n        break;\n      case '+':\n        result.push(before.indexOf(each[1]) > -1 ? ['p', each[1]] : ['+', each[1]]);\n    }\n  });\n  return result;\n};\nvar compress = function (diff) {\n  var result = [];\n  var modifier;\n  var section = [];\n  diff.forEach(function (each) {\n    if (modifier && each[0] == modifier) {\n      section.push(each[1]);\n    } else {\n      if (modifier) result.push([modifier, section]);\n      section = [each[1]];\n      modifier = each[0];\n    }\n  });\n  if (modifier) result.push([modifier, section]);\n  return result;\n};\nmodule.exports = function (opts) {\n  opts = opts || {};\n  return function (before, after) {\n    var result = opts.unique ? orderedSetDiff(before, after) : diff(before, after);\n    return opts.compress ? compress(result) : result;\n  };\n};","map":{"version":3,"names":["_","require","longestCommonSubstring","diff","before","after","commonSeq","startBefore","startString1","startAfter","startString2","length","result","map","each","concat","beforeLeft","slice","afterLeft","equal","beforeRight","afterRight","union","orderedSetDiff","diffRes","forEach","push","indexOf","compress","modifier","section","module","exports","opts","unique"],"sources":["/home/zhillyz/shoppingList/node_modules/array-diff/index.js"],"sourcesContent":["\nvar _ = require('underscore')\nvar longestCommonSubstring = require('longest-common-substring')\n\nvar diff = function(before, after) {\n  var commonSeq = longestCommonSubstring(before, after)\n  var startBefore = commonSeq.startString1\n  var startAfter = commonSeq.startString2\n  if (commonSeq.length == 0) {\n    var result = before.map(function(each) { return ['-', each]})\n    return result.concat(after.map(function(each) { return ['+', each]}))\n  }\n  var beforeLeft = before.slice(0, startBefore)\n  var afterLeft = after.slice(0, startAfter)\n  var equal = after.slice(startAfter, startAfter + commonSeq.length)\n    .map(function(each) {return ['=', each]})\n  var beforeRight = before.slice(startBefore + commonSeq.length)\n  var afterRight = after.slice(startAfter + commonSeq.length)\n  return _.union(diff(beforeLeft, afterLeft), equal, diff(beforeRight, afterRight))\n}\n\nvar orderedSetDiff = function(before, after) {\n  var diffRes = diff(before, after)\n  var result = []\n  diffRes.forEach(function(each) {\n    switch(each[0]) {\n      case '=':\n        result.push(each)\n        break\n      case '-':\n        result.push((after.indexOf(each[1]) > -1) ? ['x', each[1]] : ['-', each[1]])\n        break\n      case '+':\n        result.push((before.indexOf(each[1]) > -1) ? ['p', each[1]] : ['+', each[1]])\n    }\n  })\n  return result\n}\n\nvar compress = function(diff) {\n  var result = []\n  var modifier\n  var section = []\n  diff.forEach(function(each) {\n    if(modifier && (each[0] == modifier)) {\n      section.push(each[1])\n    } else {\n      if(modifier) result.push([modifier, section])\n      section = [each[1]]\n      modifier = each[0]\n    }\n  })\n  if(modifier) result.push([modifier, section])\n  return result\n}\n\nmodule.exports = function(opts) {\n  opts = opts || {}\n  return function(before, after) {\n    var result = opts.unique ? orderedSetDiff(before, after) : diff(before, after)\n    return opts.compress ? compress(result) : result\n  }\n}"],"mappings":"AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC7B,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAEhE,IAAIE,IAAI,GAAG,SAAAA,CAASC,MAAM,EAAEC,KAAK,EAAE;EACjC,IAAIC,SAAS,GAAGJ,sBAAsB,CAACE,MAAM,EAAEC,KAAK,CAAC;EACrD,IAAIE,WAAW,GAAGD,SAAS,CAACE,YAAY;EACxC,IAAIC,UAAU,GAAGH,SAAS,CAACI,YAAY;EACvC,IAAIJ,SAAS,CAACK,MAAM,IAAI,CAAC,EAAE;IACzB,IAAIC,MAAM,GAAGR,MAAM,CAACS,GAAG,CAAC,UAASC,IAAI,EAAE;MAAE,OAAO,CAAC,GAAG,EAAEA,IAAI,CAAC;IAAA,CAAC,CAAC;IAC7D,OAAOF,MAAM,CAACG,MAAM,CAACV,KAAK,CAACQ,GAAG,CAAC,UAASC,IAAI,EAAE;MAAE,OAAO,CAAC,GAAG,EAAEA,IAAI,CAAC;IAAA,CAAC,CAAC,CAAC;EACvE;EACA,IAAIE,UAAU,GAAGZ,MAAM,CAACa,KAAK,CAAC,CAAC,EAAEV,WAAW,CAAC;EAC7C,IAAIW,SAAS,GAAGb,KAAK,CAACY,KAAK,CAAC,CAAC,EAAER,UAAU,CAAC;EAC1C,IAAIU,KAAK,GAAGd,KAAK,CAACY,KAAK,CAACR,UAAU,EAAEA,UAAU,GAAGH,SAAS,CAACK,MAAM,CAAC,CAC/DE,GAAG,CAAC,UAASC,IAAI,EAAE;IAAC,OAAO,CAAC,GAAG,EAAEA,IAAI,CAAC;EAAA,CAAC,CAAC;EAC3C,IAAIM,WAAW,GAAGhB,MAAM,CAACa,KAAK,CAACV,WAAW,GAAGD,SAAS,CAACK,MAAM,CAAC;EAC9D,IAAIU,UAAU,GAAGhB,KAAK,CAACY,KAAK,CAACR,UAAU,GAAGH,SAAS,CAACK,MAAM,CAAC;EAC3D,OAAOX,CAAC,CAACsB,KAAK,CAACnB,IAAI,CAACa,UAAU,EAAEE,SAAS,CAAC,EAAEC,KAAK,EAAEhB,IAAI,CAACiB,WAAW,EAAEC,UAAU,CAAC,CAAC;AACnF,CAAC;AAED,IAAIE,cAAc,GAAG,SAAAA,CAASnB,MAAM,EAAEC,KAAK,EAAE;EAC3C,IAAImB,OAAO,GAAGrB,IAAI,CAACC,MAAM,EAAEC,KAAK,CAAC;EACjC,IAAIO,MAAM,GAAG,EAAE;EACfY,OAAO,CAACC,OAAO,CAAC,UAASX,IAAI,EAAE;IAC7B,QAAOA,IAAI,CAAC,CAAC,CAAC;MACZ,KAAK,GAAG;QACNF,MAAM,CAACc,IAAI,CAACZ,IAAI,CAAC;QACjB;MACF,KAAK,GAAG;QACNF,MAAM,CAACc,IAAI,CAAErB,KAAK,CAACsB,OAAO,CAACb,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E;MACF,KAAK,GAAG;QACNF,MAAM,CAACc,IAAI,CAAEtB,MAAM,CAACuB,OAAO,CAACb,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACjF;EACF,CAAC,CAAC;EACF,OAAOF,MAAM;AACf,CAAC;AAED,IAAIgB,QAAQ,GAAG,SAAAA,CAASzB,IAAI,EAAE;EAC5B,IAAIS,MAAM,GAAG,EAAE;EACf,IAAIiB,QAAQ;EACZ,IAAIC,OAAO,GAAG,EAAE;EAChB3B,IAAI,CAACsB,OAAO,CAAC,UAASX,IAAI,EAAE;IAC1B,IAAGe,QAAQ,IAAKf,IAAI,CAAC,CAAC,CAAC,IAAIe,QAAS,EAAE;MACpCC,OAAO,CAACJ,IAAI,CAACZ,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM;MACL,IAAGe,QAAQ,EAAEjB,MAAM,CAACc,IAAI,CAAC,CAACG,QAAQ,EAAEC,OAAO,CAAC,CAAC;MAC7CA,OAAO,GAAG,CAAChB,IAAI,CAAC,CAAC,CAAC,CAAC;MACnBe,QAAQ,GAAGf,IAAI,CAAC,CAAC,CAAC;IACpB;EACF,CAAC,CAAC;EACF,IAAGe,QAAQ,EAAEjB,MAAM,CAACc,IAAI,CAAC,CAACG,QAAQ,EAAEC,OAAO,CAAC,CAAC;EAC7C,OAAOlB,MAAM;AACf,CAAC;AAEDmB,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI,EAAE;EAC9BA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,OAAO,UAAS7B,MAAM,EAAEC,KAAK,EAAE;IAC7B,IAAIO,MAAM,GAAGqB,IAAI,CAACC,MAAM,GAAGX,cAAc,CAACnB,MAAM,EAAEC,KAAK,CAAC,GAAGF,IAAI,CAACC,MAAM,EAAEC,KAAK,CAAC;IAC9E,OAAO4B,IAAI,CAACL,QAAQ,GAAGA,QAAQ,CAAChB,MAAM,CAAC,GAAGA,MAAM;EAClD,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}