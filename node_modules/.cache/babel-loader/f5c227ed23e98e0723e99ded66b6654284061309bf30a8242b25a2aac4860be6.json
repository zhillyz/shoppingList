{"ast":null,"code":"var _jsxFileName = \"/home/zhillyz/shoppingList/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RecipeApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleRecipeChange = event => {\n      this.setState({\n        currentRecipe: event.target.value\n      });\n    };\n    /**\n     * Adds an owned ingredient based on user input.\n     */\n    this.addOwnedIngredient = () => {\n      // Prompt the user to enter the ingredient and quantity\n      const ingredient = window.prompt('Enter the ingredient:');\n      const quantity = window.prompt('Enter the quantity:');\n      if (ingredient && quantity) {\n        // Retrieve the shoppingList and ownedIngredients from the state\n        const {\n          shoppingList,\n          ownedIngredients\n        } = this.state;\n        const updatedShoppingList = {\n          ...shoppingList\n        };\n        const updatedOwnedIngredients = {\n          ...ownedIngredients\n        };\n        if (updatedOwnedIngredients[ingredient]) {\n          // If the ingredient is already in the ownedIngredients, update the remaining quantity\n          updatedOwnedIngredients[ingredient].remaining += parseFloat(quantity);\n        } else {\n          // If the ingredient is not in the ownedIngredients, create a new entry with the used and remaining quantities\n          updatedOwnedIngredients[ingredient] = {\n            used: 0,\n            remaining: parseFloat(quantity)\n          };\n        }\n        if (updatedShoppingList[ingredient]) {\n          // Calculate the remaining quantity needed for the shopping list\n          const neededQuantity = updatedShoppingList[ingredient] - parseFloat(quantity);\n          if (neededQuantity > 0) {\n            // Update the shopping list if there's still a need for the ingredient\n            updatedShoppingList[ingredient] = neededQuantity;\n            updatedOwnedIngredients[ingredient] = {\n              used: updatedShoppingList[ingredient],\n              remaining: parseFloat(quantity) - updatedShoppingList[ingredient]\n            };\n          } else {\n            // If the needed quantity is zero or less, remove the ingredient from the shopping list\n            updatedOwnedIngredients[ingredient] = {\n              used: parseFloat(quantity) - updatedShoppingList[ingredient],\n              remaining: 0\n            };\n            delete updatedShoppingList[ingredient];\n          }\n        }\n\n        // Update the state with the updated shoppingList and ownedIngredients\n        this.setState({\n          shoppingList: updatedShoppingList,\n          ownedIngredients: updatedOwnedIngredients\n        }, () => {\n          this.updateShoppingListFromOwned();\n        });\n      }\n    };\n    this.handleStoredRecipeClick = recipeName => {\n      const {\n        recipes\n      } = this.state;\n      const recipeIngredients = recipes[recipeName];\n      if (recipeIngredients) {\n        this.updateShoppingList(recipeIngredients);\n      }\n    };\n    this.deleteRecipe = recipeName => {\n      const {\n        recipes\n      } = this.state;\n      const updatedRecipes = {\n        ...recipes\n      };\n      delete updatedRecipes[recipeName];\n      this.setState({\n        recipes: updatedRecipes\n      });\n    };\n    this.addRecipe = () => {\n      const {\n        recipes,\n        currentRecipe\n      } = this.state;\n      if (currentRecipe.trim() === '') {\n        return;\n      }\n      const recipeIngredients = recipes[currentRecipe];\n      if (recipeIngredients) {\n        this.updateShoppingList(recipeIngredients);\n      } else {\n        const confirmAddRecipe = window.confirm('Recipe not found. Do you want to add it?');\n        if (confirmAddRecipe) {\n          this.addNewRecipe(currentRecipe);\n        }\n      }\n    };\n    this.updateShoppingList = ingredients => {\n      // Retrieve the ownedIngredients and shoppingList from the state\n      const {\n        ownedIngredients\n      } = this.state;\n      const updatedShoppingList = {\n        ...this.state.shoppingList\n      };\n      const updatedOwnedIngredients = {\n        ...ownedIngredients\n      };\n\n      // Loop through each ingredient\n      ingredients.forEach(ingredient => {\n        var _ownedIngredients$ing;\n        const spaceIndex = ingredient.indexOf(' ');\n        let quantity;\n        let ingredientName;\n\n        // Check if the ingredient has a quantity specified or not\n        if (spaceIndex === -1) {\n          // Default quantity is 1 if not specified\n          quantity = '1';\n          ingredientName = ingredient;\n        } else {\n          // Extract the quantity and ingredient name from the string\n          quantity = ingredient.slice(0, spaceIndex);\n          ingredientName = ingredient.slice(spaceIndex + 1);\n        }\n\n        // Parse the quantity to a numeric value\n        const parsedQuantity = this.parseQuantity(quantity);\n        const ownedQuantity = ((_ownedIngredients$ing = ownedIngredients[ingredientName]) === null || _ownedIngredients$ing === void 0 ? void 0 : _ownedIngredients$ing.remaining) || 0;\n\n        // Calculate the remaining quantity needed for the ingredient\n        const neededQuantity = parsedQuantity - ownedQuantity;\n\n        // Update the shopping list if there's still a need for the ingredient\n        if (neededQuantity > 0) {\n          updatedShoppingList[ingredientName] = (updatedShoppingList[ingredientName] || 0) + neededQuantity;\n        }\n\n        // Update owned ingredient quantities\n        if (ownedQuantity > 0 && neededQuantity < 0) {\n          updatedOwnedIngredients[ingredientName].remaining = Math.abs(neededQuantity);\n          updatedOwnedIngredients[ingredientName].used = parsedQuantity;\n        } else if (ownedQuantity > 0) {\n          updatedOwnedIngredients[ingredientName].used = updatedOwnedIngredients[ingredientName].remaining;\n          updatedOwnedIngredients[ingredientName].remaining = 0;\n        }\n      });\n\n      // Update the state with the updated shopping list, owned ingredients, and current recipe\n      this.setState({\n        currentRecipe: '',\n        shoppingList: updatedShoppingList,\n        ownedIngredients: updatedOwnedIngredients\n      }, () => {\n        // After updating the state, trigger the updateShoppingListFromOwned function\n        //this.updateShoppingListFromOwned();\n      });\n    };\n    /**\n    * Updates the shopping list based on the owned ingredients.\n    */\n    this.updateShoppingListFromOwned = () => {\n      // Destructure the shoppingList and ownedIngredients from the state\n      const {\n        shoppingList,\n        ownedIngredients\n      } = this.state;\n\n      // Create copies of the original shoppingList and ownedIngredients\n      const updatedShoppingList = {\n        ...shoppingList\n      };\n      const updatedOwnedIngredients = {\n        ...ownedIngredients\n      };\n\n      // Iterate over each owned ingredient\n      for (const [ingredient, quantity] of Object.entries(ownedIngredients)) {\n        // Destructure the used and remaining quantities from the current ingredient\n        const {\n          used,\n          remaining\n        } = quantity;\n\n        // Check if the ingredient is already in the shoppingList\n        if (shoppingList[ingredient]) {\n          // Calculate the remaining quantity of the ingredient\n          const remainingQuantity = Math.max(shoppingList[ingredient] - used, 0);\n\n          // Update the owned ingredient with the used and remaining quantities\n          updatedOwnedIngredients[ingredient] = {\n            used,\n            remaining: remainingQuantity\n          };\n\n          // If the remaining quantity is zero or less, remove the ingredient from the shoppingList\n          if (remainingQuantity <= 0) {\n            delete updatedShoppingList[ingredient];\n          }\n        } else {\n          // If the ingredient is not in the shoppingList, update the owned ingredient with the used and remaining quantities\n          updatedOwnedIngredients[ingredient] = {\n            used,\n            remaining\n          };\n        }\n      }\n\n      // Update the state with the updated shoppingList and ownedIngredients\n      this.setState({\n        shoppingList: updatedShoppingList,\n        ownedIngredients: updatedOwnedIngredients\n      });\n    };\n    this.addNewRecipe = recipeName => {\n      const ingredients = window.prompt('Enter the ingredients (separated by commas):');\n      if (ingredients) {\n        const recipeIngredients = ingredients.split(',').map(ingredient => ingredient.trim());\n        const {\n          recipes\n        } = this.state;\n        const updatedRecipes = {\n          ...recipes,\n          [recipeName]: recipeIngredients\n        };\n        this.setState({\n          recipes: updatedRecipes\n        }, () => {\n          this.updateShoppingList(recipeIngredients);\n        });\n      }\n    };\n    this.clearShoppingList = () => {\n      this.setState({\n        shoppingList: {}\n      });\n    };\n    this.parseQuantity = quantity => {\n      if (quantity.trim() === '') {\n        return 1; // Default to 1 if no quantity is provided\n      }\n\n      if (quantity.includes('/')) {\n        const [numerator, denominator] = quantity.split('/');\n        return parseFloat(numerator) / parseFloat(denominator);\n      }\n      return parseFloat(quantity);\n    };\n    this.removeOwnedIngredient = ingredient => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const updatedIngredients = {\n        ...ownedIngredients\n      };\n      delete updatedIngredients[ingredient];\n      this.setState({\n        ownedIngredients: updatedIngredients\n      });\n    };\n    this.renderOwnedIngredients = () => {\n      const {\n        ownedIngredients\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.entries(ownedIngredients).map((_ref, index) => {\n          let [ingredient, quantity] = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"owned-ingredient\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient\",\n              children: ingredient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: quantity.used,\n              onChange: event => this.handleOwnedIngredientUsedChange(event, ingredient),\n              className: quantity.used > 0 ? 'red' : 'green'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: quantity.remaining,\n              onChange: event => this.handleOwnedIngredientRemainingChange(event, ingredient),\n              className: quantity.used > 0 ? 'red' : 'green'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.removeOwnedIngredient(ingredient),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }, this);\n    };\n    this.handleAddRecipe = recipe => {\n      const {\n        shoppingList\n      } = this.state;\n      const updatedShoppingList = {\n        ...shoppingList\n      };\n      recipe.ingredients.forEach(ingredient => {\n        const {\n          name,\n          quantity\n        } = ingredient;\n        if (updatedShoppingList[name]) {\n          updatedShoppingList[name] += quantity;\n        } else {\n          updatedShoppingList[name] = quantity;\n        }\n      });\n      this.setState({\n        shoppingList: updatedShoppingList\n      });\n    };\n    this.handleOwnedIngredientUsedChange = (event, ingredient) => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const used = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n      const updatedOwnedIngredients = {\n        ...ownedIngredients,\n        [ingredient]: {\n          ...ownedIngredients[ingredient],\n          used\n        }\n      };\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      });\n    };\n    this.handleOwnedIngredientChange = (event, ingredient) => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const quantity = event.target.value.trim() === '' ? '' : parseInt(event.target.value, 10);\n      const updatedOwnedIngredients = {\n        ...ownedIngredients,\n        [ingredient]: {\n          ...ownedIngredients[ingredient],\n          remaining: quantity // Update the `remaining` property instead of the whole ingredient value\n        }\n      };\n\n      // Calculate the new used quantity based on the updated remaining quantity\n      const currentQuantity = updatedOwnedIngredients[ingredient];\n      if (currentQuantity) {\n        const newUsed = Math.max(currentQuantity.used - currentQuantity.remaining + quantity, 0);\n        currentQuantity.used = newUsed;\n      }\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      }, () => {\n        this.updateShoppingListFromOwned();\n      });\n    };\n    /**\n     * Handles the change event for the remaining quantity of an owned ingredient.\n     * @param {Event} event - The change event object.\n     * @param {string} ingredient - The name of the ingredient being updated.\n     */\n    this.handleOwnedIngredientRemainingChange = (event, ingredient) => {\n      // Retrieve the ownedIngredients from the state\n      const {\n        ownedIngredients\n      } = this.state;\n\n      // Extract the remaining quantity value from the event target\n      const remaining = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n\n      // Create a copy of the ownedIngredients with the updated remaining quantity for the specified ingredient\n      const updatedOwnedIngredients = {\n        ...ownedIngredients,\n        [ingredient]: {\n          ...ownedIngredients[ingredient],\n          remaining\n        }\n      };\n\n      // Update the state with the updated ownedIngredients\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      });\n    };\n    this.updateOwnedIngredientsExit = () => {\n      const {\n        ownedIngredients\n      } = this.state;\n      const updatedOwnedIngredients = {\n        ...ownedIngredients\n      };\n      Object.keys(updatedOwnedIngredients).forEach(key => {\n        updatedOwnedIngredients[key].used = 0;\n      });\n      this.setState({\n        ownedIngredients: updatedOwnedIngredients\n      });\n      window.close();\n    };\n    this.renderShoppingList = () => {\n      const {\n        shoppingList,\n        ownedIngredients\n      } = this.state;\n      return Object.keys(shoppingList).map((ingredientName, index) => {\n        var _ownedIngredients$ing2;\n        const shoppingQuantity = shoppingList[ingredientName];\n        const ownedQuantity = ((_ownedIngredients$ing2 = ownedIngredients[ingredientName]) === null || _ownedIngredients$ing2 === void 0 ? void 0 : _ownedIngredients$ing2.quantity) || 0;\n        const remainingQuantity = shoppingQuantity - ownedQuantity;\n        if (remainingQuantity <= 0) {\n          return null; // Skip rendering if the ingredient is fully owned\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [remainingQuantity, \" \", ingredientName]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 9\n        }, this);\n      });\n    };\n    const storedRecipes = localStorage.getItem('recipes');\n    const storedShoppingList = localStorage.getItem('shoppingList');\n    const storedOwnedIngredients = localStorage.getItem('ownedIngredients');\n    this.state = {\n      recipes: storedRecipes ? JSON.parse(storedRecipes) : {\n        Pancakes: ['1 cup Flour', '1 cup Milk', '2 Eggs', '2 tbsp Butter', '1/4 tsp Salt', '1 tbsp Sugar'],\n        Salad: ['1 head Lettuce', '2 Tomatoes', '1 Cucumber', '1/2 Onion', '2 tbsp Olive Oil', '1 tbsp Vinegar', 'Salt', 'Pepper']\n      },\n      currentRecipe: '',\n      shoppingList: storedShoppingList ? JSON.parse(storedShoppingList) : {},\n      ownedIngredients: storedOwnedIngredients ? JSON.parse(storedOwnedIngredients) : {}\n    };\n  }\n  componentDidUpdate() {\n    localStorage.setItem('recipes', JSON.stringify(this.state.recipes));\n    localStorage.setItem('shoppingList', JSON.stringify(this.state.shoppingList));\n    localStorage.setItem('ownedIngredients', JSON.stringify(this.state.ownedIngredients));\n  }\n  render() {\n    const {\n      currentRecipe,\n      shoppingList,\n      recipes,\n      ownedIngredients\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Recipe App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-receipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: currentRecipe,\n          onChange: this.handleRecipeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addRecipe,\n          children: \"Add Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shopping-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Shopping List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), Object.keys(shoppingList).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No items in the shopping list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Object.entries(shoppingList).map((_ref2, index) => {\n              let [ingredient, quantity] = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [quantity, \" \", ingredient]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.clearShoppingList,\n            children: \"Clear Shopping List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stored-recipes\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Stored Recipes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), Object.keys(recipes).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No recipes stored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: Object.keys(recipes).map((recipeName, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"recipe-box\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"recipe-name\",\n                children: recipeName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add-button\",\n                onClick: () => this.handleStoredRecipeClick(recipeName),\n                children: \"Add to Shopping List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => this.deleteRecipe(recipeName),\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"owned-ingredients\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Owned Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"owned-ingredient\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ingredient-heading\",\n              children: \"Ingredient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"quantity-heading\",\n              children: \"Used\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"quantity-heading\",\n              children: \"Remaining\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-heading\",\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), this.renderOwnedIngredients(), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.addOwnedIngredient,\n            children: \"Add Ingredient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.updateOwnedIngredientsExit,\n            children: \"Save updated owned ingredients and exit.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RecipeApp;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RecipeApp","Component","constructor","props","handleRecipeChange","event","setState","currentRecipe","target","value","addOwnedIngredient","ingredient","window","prompt","quantity","shoppingList","ownedIngredients","state","updatedShoppingList","updatedOwnedIngredients","remaining","parseFloat","used","neededQuantity","updateShoppingListFromOwned","handleStoredRecipeClick","recipeName","recipes","recipeIngredients","updateShoppingList","deleteRecipe","updatedRecipes","addRecipe","trim","confirmAddRecipe","confirm","addNewRecipe","ingredients","forEach","_ownedIngredients$ing","spaceIndex","indexOf","ingredientName","slice","parsedQuantity","parseQuantity","ownedQuantity","Math","abs","Object","entries","remainingQuantity","max","split","map","clearShoppingList","includes","numerator","denominator","removeOwnedIngredient","updatedIngredients","renderOwnedIngredients","children","_ref","index","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","handleOwnedIngredientUsedChange","handleOwnedIngredientRemainingChange","onClick","handleAddRecipe","recipe","name","parseInt","handleOwnedIngredientChange","currentQuantity","newUsed","updateOwnedIngredientsExit","keys","key","close","renderShoppingList","_ownedIngredients$ing2","shoppingQuantity","storedRecipes","localStorage","getItem","storedShoppingList","storedOwnedIngredients","JSON","parse","Pancakes","Salad","componentDidUpdate","setItem","stringify","render","length","_ref2"],"sources":["/home/zhillyz/shoppingList/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass RecipeApp extends React.Component {\n  constructor(props) {\n    super(props);\n    const storedRecipes = localStorage.getItem('recipes');\n    const storedShoppingList = localStorage.getItem('shoppingList');\n    const storedOwnedIngredients = localStorage.getItem('ownedIngredients');\n\n    this.state = {\n      recipes: storedRecipes ? JSON.parse(storedRecipes) : {\n        Pancakes: ['1 cup Flour', '1 cup Milk', '2 Eggs', '2 tbsp Butter', '1/4 tsp Salt', '1 tbsp Sugar'],\n        Salad: ['1 head Lettuce', '2 Tomatoes', '1 Cucumber', '1/2 Onion', '2 tbsp Olive Oil', '1 tbsp Vinegar', 'Salt', 'Pepper'],\n      },\n      currentRecipe: '',\n      shoppingList: storedShoppingList ? JSON.parse(storedShoppingList) : {},\n      ownedIngredients: storedOwnedIngredients ? JSON.parse(storedOwnedIngredients) : {},\n    };\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('recipes', JSON.stringify(this.state.recipes));\n    localStorage.setItem('shoppingList', JSON.stringify(this.state.shoppingList));\n    localStorage.setItem('ownedIngredients', JSON.stringify(this.state.ownedIngredients));\n  }\n\n  handleRecipeChange = (event) => {\n    this.setState({ currentRecipe: event.target.value });\n  };\n\n  /**\n   * Adds an owned ingredient based on user input.\n   */\n  addOwnedIngredient = () => {\n    // Prompt the user to enter the ingredient and quantity\n    const ingredient = window.prompt('Enter the ingredient:');\n    const quantity = window.prompt('Enter the quantity:');\n  \n    if (ingredient && quantity) {\n      // Retrieve the shoppingList and ownedIngredients from the state\n      const { shoppingList, ownedIngredients } = this.state;\n      const updatedShoppingList = { ...shoppingList };\n      const updatedOwnedIngredients = { ...ownedIngredients };\n  \n      if (updatedOwnedIngredients[ingredient]) {\n        // If the ingredient is already in the ownedIngredients, update the remaining quantity\n        updatedOwnedIngredients[ingredient].remaining += parseFloat(quantity);\n      } else {\n        // If the ingredient is not in the ownedIngredients, create a new entry with the used and remaining quantities\n        updatedOwnedIngredients[ingredient] = {\n          used: 0,\n          remaining: parseFloat(quantity),\n        };\n      }\n  \n      if (updatedShoppingList[ingredient]) {\n        // Calculate the remaining quantity needed for the shopping list\n        const neededQuantity = updatedShoppingList[ingredient] - parseFloat(quantity);\n  \n        if (neededQuantity > 0) {\n          // Update the shopping list if there's still a need for the ingredient\n          updatedShoppingList[ingredient] = neededQuantity;\n          updatedOwnedIngredients[ingredient] = {\n            used: updatedShoppingList[ingredient],\n            remaining: parseFloat(quantity)-updatedShoppingList[ingredient],\n          };\n        } else {\n          // If the needed quantity is zero or less, remove the ingredient from the shopping list\n          updatedOwnedIngredients[ingredient] = {\n            used: parseFloat(quantity)-updatedShoppingList[ingredient],\n            remaining: 0,\n          };\n          delete updatedShoppingList[ingredient];\n        }\n      }\n  \n      // Update the state with the updated shoppingList and ownedIngredients\n      this.setState(\n        {\n          shoppingList: updatedShoppingList,\n          ownedIngredients: updatedOwnedIngredients,\n        },\n        () => {\n          this.updateShoppingListFromOwned();\n        }\n      );\n    }\n  };\n  \n\n  handleStoredRecipeClick = (recipeName) => {\n    const { recipes } = this.state;\n    const recipeIngredients = recipes[recipeName];\n    if (recipeIngredients) {\n      this.updateShoppingList(recipeIngredients);\n    }\n  };\n  \n  deleteRecipe = (recipeName) => {\n    const { recipes } = this.state;\n    const updatedRecipes = { ...recipes };\n    delete updatedRecipes[recipeName];\n    this.setState({ recipes: updatedRecipes });\n  };\n\n  addRecipe = () => {\n    const { recipes, currentRecipe } = this.state;\n\n    if (currentRecipe.trim() === '') {\n      return;\n    }\n\n    const recipeIngredients = recipes[currentRecipe];\n    if (recipeIngredients) {\n      this.updateShoppingList(recipeIngredients);\n    } else {\n      const confirmAddRecipe = window.confirm('Recipe not found. Do you want to add it?');\n      if (confirmAddRecipe) {\n        this.addNewRecipe(currentRecipe);\n      }\n    }\n  };\n\n  updateShoppingList = (ingredients) => {\n    // Retrieve the ownedIngredients and shoppingList from the state\n    const { ownedIngredients } = this.state;\n    const updatedShoppingList = { ...this.state.shoppingList };\n    const updatedOwnedIngredients = { ...ownedIngredients };\n  \n    // Loop through each ingredient\n    ingredients.forEach((ingredient) => {\n      const spaceIndex = ingredient.indexOf(' ');\n      let quantity;\n      let ingredientName;\n  \n      // Check if the ingredient has a quantity specified or not\n      if (spaceIndex === -1) {\n        // Default quantity is 1 if not specified\n        quantity = '1';\n        ingredientName = ingredient;\n      } else {\n        // Extract the quantity and ingredient name from the string\n        quantity = ingredient.slice(0, spaceIndex);\n        ingredientName = ingredient.slice(spaceIndex + 1);\n      }\n  \n      // Parse the quantity to a numeric value\n      const parsedQuantity = this.parseQuantity(quantity);\n      const ownedQuantity = ownedIngredients[ingredientName]?.remaining || 0;\n  \n      // Calculate the remaining quantity needed for the ingredient\n      const neededQuantity = parsedQuantity - ownedQuantity;\n  \n      // Update the shopping list if there's still a need for the ingredient\n      if (neededQuantity > 0) {\n        updatedShoppingList[ingredientName] = (updatedShoppingList[ingredientName] || 0) + neededQuantity;\n      }\n  \n      // Update owned ingredient quantities\n      if (ownedQuantity > 0 && neededQuantity < 0) {\n        updatedOwnedIngredients[ingredientName].remaining = Math.abs(neededQuantity);\n        updatedOwnedIngredients[ingredientName].used = parsedQuantity;\n      } else if (ownedQuantity > 0){\n        updatedOwnedIngredients[ingredientName].used = updatedOwnedIngredients[ingredientName].remaining\n        updatedOwnedIngredients[ingredientName].remaining = 0;\n      }\n      \n    });\n  \n    // Update the state with the updated shopping list, owned ingredients, and current recipe\n    this.setState(\n      {\n        currentRecipe: '',\n        shoppingList: updatedShoppingList,\n        ownedIngredients: updatedOwnedIngredients,\n      },\n      () => {\n        // After updating the state, trigger the updateShoppingListFromOwned function\n        //this.updateShoppingListFromOwned();\n      }\n    );\n  };\n\n  /**\n * Updates the shopping list based on the owned ingredients.\n */\nupdateShoppingListFromOwned = () => {\n  // Destructure the shoppingList and ownedIngredients from the state\n  const { shoppingList, ownedIngredients } = this.state;\n\n  // Create copies of the original shoppingList and ownedIngredients\n  const updatedShoppingList = { ...shoppingList };\n  const updatedOwnedIngredients = { ...ownedIngredients };\n\n  // Iterate over each owned ingredient\n  for (const [ingredient, quantity] of Object.entries(ownedIngredients)) {\n    // Destructure the used and remaining quantities from the current ingredient\n    const { used, remaining } = quantity;\n\n    // Check if the ingredient is already in the shoppingList\n    if (shoppingList[ingredient]) {\n      // Calculate the remaining quantity of the ingredient\n      const remainingQuantity = Math.max(shoppingList[ingredient] - used, 0);\n\n      // Update the owned ingredient with the used and remaining quantities\n      updatedOwnedIngredients[ingredient] = {\n        used,\n        remaining: remainingQuantity,\n      };\n\n      // If the remaining quantity is zero or less, remove the ingredient from the shoppingList\n      if (remainingQuantity <= 0) {\n        delete updatedShoppingList[ingredient];\n      }\n    } else {\n      // If the ingredient is not in the shoppingList, update the owned ingredient with the used and remaining quantities\n      updatedOwnedIngredients[ingredient] = {\n        used,\n        remaining,\n      };\n    }\n  }\n\n  // Update the state with the updated shoppingList and ownedIngredients\n  this.setState({\n    shoppingList: updatedShoppingList,\n    ownedIngredients: updatedOwnedIngredients,\n  });\n};\n\n  addNewRecipe = (recipeName) => {\n    const ingredients = window.prompt('Enter the ingredients (separated by commas):');\n\n    if (ingredients) {\n      const recipeIngredients = ingredients.split(',').map((ingredient) => ingredient.trim());\n      const { recipes } = this.state;\n\n      const updatedRecipes = { ...recipes, [recipeName]: recipeIngredients };\n      this.setState({ recipes: updatedRecipes }, () => {\n        this.updateShoppingList(recipeIngredients);\n      });\n    }\n  };\n\n  clearShoppingList = () => {\n    this.setState({ shoppingList: {} });\n  };\n\n  parseQuantity = (quantity) => {\n    if (quantity.trim() === '') {\n      return 1; // Default to 1 if no quantity is provided\n    }\n\n    if (quantity.includes('/')) {\n      const [numerator, denominator] = quantity.split('/');\n      return parseFloat(numerator) / parseFloat(denominator);\n    }\n\n    return parseFloat(quantity);\n  };\n\n  removeOwnedIngredient = (ingredient) => {\n    const { ownedIngredients } = this.state;\n    const updatedIngredients = { ...ownedIngredients };\n  \n    delete updatedIngredients[ingredient];\n  \n    this.setState({ ownedIngredients: updatedIngredients });\n  };\n\n  renderOwnedIngredients = () => {\n    const { ownedIngredients } = this.state;\n  \n    return (\n      <div>\n        {Object.entries(ownedIngredients).map(([ingredient, quantity], index) => {\n          return (\n            <div key={index} className=\"owned-ingredient\">\n              <div className=\"ingredient\">{ingredient}</div>\n              <input\n                type=\"number\"\n                value={quantity.used}\n                onChange={(event) => this.handleOwnedIngredientUsedChange(event, ingredient)}\n                className={quantity.used > 0 ? 'red' : 'green'}\n              />\n              <input\n                type=\"number\"\n                value={quantity.remaining}\n                onChange={(event) => this.handleOwnedIngredientRemainingChange(event, ingredient)}\n                className={quantity.used > 0 ? 'red' : 'green'}\n              />\n              <button onClick={() => this.removeOwnedIngredient(ingredient)}>Remove</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n \n  \n  handleAddRecipe = (recipe) => {\n    const { shoppingList } = this.state;\n    const updatedShoppingList = { ...shoppingList };\n  \n    recipe.ingredients.forEach((ingredient) => {\n      const { name, quantity } = ingredient;\n  \n      if (updatedShoppingList[name]) {\n        updatedShoppingList[name] += quantity;\n      } else {\n        updatedShoppingList[name] = quantity;\n      }\n    });\n  \n    this.setState({ shoppingList: updatedShoppingList });\n  };\n  \n\n  handleOwnedIngredientUsedChange = (event, ingredient) => {\n    const { ownedIngredients } = this.state;\n    const used = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n    const updatedOwnedIngredients = {\n      ...ownedIngredients,\n      [ingredient]: {\n        ...ownedIngredients[ingredient],\n        used,\n      },\n    };\n  \n    this.setState({ ownedIngredients: updatedOwnedIngredients });\n  };\n\n  \n  handleOwnedIngredientChange = (event, ingredient) => {\n    const { ownedIngredients } = this.state;\n    const quantity = event.target.value.trim() === '' ? '' : parseInt(event.target.value, 10);\n  \n    const updatedOwnedIngredients = {\n      ...ownedIngredients,\n      [ingredient]: {\n        ...ownedIngredients[ingredient],\n        remaining: quantity, // Update the `remaining` property instead of the whole ingredient value\n      },\n    };\n  \n    // Calculate the new used quantity based on the updated remaining quantity\n    const currentQuantity = updatedOwnedIngredients[ingredient];\n    if (currentQuantity) {\n      const newUsed = Math.max(currentQuantity.used - currentQuantity.remaining + quantity, 0);\n      currentQuantity.used = newUsed;\n    }\n  \n    this.setState({ ownedIngredients: updatedOwnedIngredients }, () => {\n      this.updateShoppingListFromOwned();\n    });\n  };\n\n  /**\n   * Handles the change event for the remaining quantity of an owned ingredient.\n   * @param {Event} event - The change event object.\n   * @param {string} ingredient - The name of the ingredient being updated.\n   */\n  handleOwnedIngredientRemainingChange = (event, ingredient) => {\n    // Retrieve the ownedIngredients from the state\n    const { ownedIngredients } = this.state;\n\n    // Extract the remaining quantity value from the event target\n    const remaining = event.target.value.trim() === '' ? 0 : parseInt(event.target.value, 10);\n\n    // Create a copy of the ownedIngredients with the updated remaining quantity for the specified ingredient\n    const updatedOwnedIngredients = {\n      ...ownedIngredients,\n      [ingredient]: {\n        ...ownedIngredients[ingredient],\n        remaining,\n      },\n    };\n\n    // Update the state with the updated ownedIngredients\n    this.setState({ ownedIngredients: updatedOwnedIngredients });\n  };\n\n  updateOwnedIngredientsExit = () => {\n    const { ownedIngredients } = this.state;\n    const updatedOwnedIngredients = { ...ownedIngredients };\n  \n    Object.keys(updatedOwnedIngredients).forEach(key => {\n      updatedOwnedIngredients[key].used = 0;\n    });\n  \n    this.setState({\n      ownedIngredients: updatedOwnedIngredients,\n    });\n    window.close()\n  };\n  \n\n  renderShoppingList = () => {\n    const { shoppingList, ownedIngredients } = this.state;\n\n    return Object.keys(shoppingList).map((ingredientName, index) => {\n      const shoppingQuantity = shoppingList[ingredientName];\n      const ownedQuantity = ownedIngredients[ingredientName]?.quantity || 0;\n      const remainingQuantity = shoppingQuantity - ownedQuantity;\n\n      if (remainingQuantity <= 0) {\n        return null; // Skip rendering if the ingredient is fully owned\n      }\n\n      return (\n        <div key={index}>\n          {remainingQuantity} {ingredientName}\n        </div>\n      );\n    });\n  };\n\n  render() {\n    const { currentRecipe, shoppingList, recipes, ownedIngredients } = this.state;\n  \n    return (\n      <div className=\"center-container\">\n        <h1>Recipe App</h1>\n        <div className=\"add-receipe-container\">\n          <input type=\"text\" value={currentRecipe} onChange={this.handleRecipeChange} />\n          <button onClick={this.addRecipe}>Add Recipe</button>\n        </div>\n        <div className=\"shopping-list\">\n          <h2>Shopping List</h2>\n          {Object.keys(shoppingList).length === 0 ? (\n            <p>No items in the shopping list</p>\n          ) : (\n            <div>\n              <ul>\n                {Object.entries(shoppingList).map(([ingredient, quantity], index) => (\n                  <li key={index}>\n                    {quantity} {ingredient}\n                  </li>\n                ))}\n              </ul>\n              <button onClick={this.clearShoppingList}>Clear Shopping List</button>\n            </div>\n          )}\n        </div>\n        <div className=\"recipe-container\">\n          <div className=\"stored-recipes\">\n            <h2>Stored Recipes</h2>\n            {Object.keys(recipes).length === 0 ? (\n              <p>No recipes stored</p>\n            ) : (\n              <div>\n                {Object.keys(recipes).map((recipeName, index) => (\n                  <div key={index} className=\"recipe-box\">\n                    <span className=\"recipe-name\">{recipeName}</span>\n                    <button className=\"add-button\" onClick={() => this.handleStoredRecipeClick(recipeName)}>\n                      Add to Shopping List\n                    </button>\n                    <button className=\"delete-button\" onClick={() => this.deleteRecipe(recipeName)}>\n                      &times;\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"owned-ingredients\">\n            <h2>Owned Ingredients</h2>\n              <div className=\"owned-ingredient\">\n                <div className=\"ingredient-heading\">Ingredient</div>\n                <div className=\"quantity-heading\">Used</div>\n                <div className=\"quantity-heading\">Remaining</div>\n                <div className=\"action-heading\">Action</div>\n              </div>\n            {this.renderOwnedIngredients()} {/* Render owned ingredients using the method */}\n            <button onClick={this.addOwnedIngredient}>Add Ingredient</button>\n            <button onClick={this.updateOwnedIngredientsExit}>Save updated owned ingredients and exit.</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  \n}\n\nexport default RecipeApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}